{
    "next-client-component": {
        "prefix": "next-client",
        "body": [
            "'use client';",
            "",
            "import React from 'react';",
            "",
            "export default function $1() {",
            "  return (",
            "    <div>",
            "      $2",
            "    </div>",
            "  );",
            "}"
        ],
        "description": "Next.js 15 — Client Component"
    },
    "next-server-component": {
        "prefix": "next-server",
        "body": [
            "import React from 'react';",
            "",
            "export default async function $1() {",
            "  return (",
            "    <div>",
            "      $2",
            "    </div>",
            "  );",
            "}"
        ],
        "description": "Next.js 15 — Server Component"
    },
    "next-server-action": {
        "prefix": "next-action",
        "body": [
            "'use server';",
            "",
            "export async function $1(formData) {",
            "  // your server logic here",
            "}"
        ],
        "description": "Next.js 15 — Server Action (used in forms or server logic)"
    },
    "next-page-component": {
        "prefix": "next-page",
        "body": [
            "import React from 'react';",
            "",
            "export default function Page() {",
            "  return (",
            "    <div>",
            "      $1",
            "    </div>",
            "  );",
            "}"
        ],
        "description": "Next.js 15 — Page Component (App Router)"
    },
    "next-loading": {
        "prefix": "next-loading",
        "body": [
            "export default function Loading() {",
            "  return <div>Loading...</div>;",
            "}"
        ],
        "description": "Next.js 15 — loading.tsx file (used for suspense fallback)"
    },
    "next-error": {
        "prefix": "next-error",
        "body": [
            "'use client';",
            "",
            "export default function Error({ error, reset }) {",
            "  return (",
            "    <div>",
            "      <h2>Something went wrong!</h2>",
            "      <button onClick={() => reset()}>Try again</button>",
            "    </div>",
            "  );",
            "}"
        ],
        "description": "Next.js 15 — error.tsx file (client component for handling errors)"
    },
    "next-route-handler": {
        "prefix": "next-handler",
        "body": [
            "import { NextResponse } from 'next/server';",
            "",
            "export async function GET(request) {",
            "  return NextResponse.json({ message: 'Hello from API' });",
            "}",
            "",
            "export async function POST(request) {",
            "  const body = await request.json();",
            "  return NextResponse.json({ received: body });",
            "}"
        ],
        "description": "Next.js 15 — Route Handler API (app/api/xyz/route.ts)"
    },
    "next-middleware": {
        "prefix": "next-middleware",
        "body": [
            "import { NextResponse } from 'next/server';",
            "import type { NextRequest } from 'next/server';",
            "",
            "export function middleware(request: NextRequest) {",
            "  const isLoggedIn = request.cookies.get('token');",
            "  if (!isLoggedIn) {",
            "    return NextResponse.redirect(new URL('/login', request.url));",
            "  }",
            "  return NextResponse.next();",
            "}",
            "",
            "export const config = {",
            "  matcher: ['/dashboard/:path*']",
            "};"
        ],
        "description": "Next.js 15 — Middleware (edge functions with route matcher)"
    },
    "next-userouter": {
        "prefix": "next-router",
        "body": [
            "const router = useRouter();",
            "// router.push('/dashboard');"
        ],
        "description": "Next.js 15 — useRouter() (for client-side navigation)"
    },
    "next-usepathname": {
        "prefix": "next-pathname",
        "body": [
            "const pathname = usePathname();",
            "// console.log(pathname);"
        ],
        "description": "Next.js 15 — usePathname() (get current URL path)"
    },
    "next-usesearchparams": {
        "prefix": "next-searchparams",
        "body": [
            "const searchParams = useSearchParams();",
            "const value = searchParams.get('$1');"
        ],
        "description": "Next.js 15 — useSearchParams() (query string parsing)"
    },
    "next-useparams": {
        "prefix": "next-params",
        "body": [
            "const params = useParams();",
            "// console.log(params);"
        ],
        "description": "Next.js 15 — useParams() (dynamic route segments)"
    },
    "next-uselayoutsegments": {
        "prefix": "next-layoutsegments",
        "body": [
            "const segments = useSelectedLayoutSegments();",
            "// console.log(segments);"
        ],
        "description": "Next.js 15 — useSelectedLayoutSegments() (layout nesting)"
    },
    "next-uselayoutsegment": {
        "prefix": "next-layoutsegment",
        "body": [
            "const segment = useSelectedLayoutSegment();",
            "// console.log(segment);"
        ],
        "description": "Next.js 15 — useSelectedLayoutSegment() (current segment)"
    }
}